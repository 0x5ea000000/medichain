// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: medichain/service_user.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ServiceUser struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index         string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	ServiceId     string `protobuf:"bytes,3,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
	UserId        string `protobuf:"bytes,4,opt,name=userId,proto3" json:"userId,omitempty"`
	ServiceUserId string `protobuf:"bytes,5,opt,name=serviceUserId,proto3" json:"serviceUserId,omitempty"`
	ConnectedAt   int64  `protobuf:"varint,6,opt,name=connectedAt,proto3" json:"connectedAt,omitempty"`
	IsActive      bool   `protobuf:"varint,7,opt,name=isActive,proto3" json:"isActive,omitempty"`
}

func (m *ServiceUser) Reset()         { *m = ServiceUser{} }
func (m *ServiceUser) String() string { return proto.CompactTextString(m) }
func (*ServiceUser) ProtoMessage()    {}
func (*ServiceUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_9deabeceb47b90a7, []int{0}
}
func (m *ServiceUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceUser.Merge(m, src)
}
func (m *ServiceUser) XXX_Size() int {
	return m.Size()
}
func (m *ServiceUser) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceUser.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceUser proto.InternalMessageInfo

func (m *ServiceUser) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ServiceUser) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *ServiceUser) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *ServiceUser) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ServiceUser) GetServiceUserId() string {
	if m != nil {
		return m.ServiceUserId
	}
	return ""
}

func (m *ServiceUser) GetConnectedAt() int64 {
	if m != nil {
		return m.ConnectedAt
	}
	return 0
}

func (m *ServiceUser) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func init() {
	proto.RegisterType((*ServiceUser)(nil), "sota.medichain.medichain.ServiceUser")
}

func init() { proto.RegisterFile("medichain/service_user.proto", fileDescriptor_9deabeceb47b90a7) }

var fileDescriptor_9deabeceb47b90a7 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x6a, 0xf3, 0x30,
	0x14, 0x85, 0xad, 0x3f, 0x7f, 0x9c, 0x44, 0xa1, 0x8b, 0x08, 0xe5, 0x12, 0x82, 0x30, 0xa5, 0x83,
	0xa1, 0x60, 0x0f, 0x7d, 0x82, 0x14, 0x3a, 0x78, 0x75, 0xe9, 0xd2, 0xa5, 0x38, 0xd2, 0xc5, 0xd1,
	0x10, 0x2b, 0x48, 0x4a, 0x48, 0xdf, 0xa2, 0x8f, 0xd5, 0x31, 0x5b, 0x3b, 0x16, 0xfb, 0x45, 0x8a,
	0xe5, 0x34, 0x4e, 0xb7, 0x73, 0xbe, 0x73, 0x90, 0x2e, 0x87, 0x2e, 0x36, 0x28, 0x95, 0x58, 0x17,
	0xaa, 0x4a, 0x2d, 0x9a, 0xbd, 0x12, 0xf8, 0xba, 0xb3, 0x68, 0x92, 0xad, 0xd1, 0x4e, 0x33, 0xb0,
	0xda, 0x15, 0xc9, 0xb9, 0xd2, 0xab, 0xf9, 0xac, 0xd4, 0xa5, 0xf6, 0xa5, 0xb4, 0x55, 0x5d, 0xff,
	0xe6, 0x93, 0xd0, 0xe9, 0x53, 0xf7, 0xcc, 0xb3, 0x45, 0xc3, 0x80, 0x8e, 0x84, 0xc1, 0xc2, 0x69,
	0x03, 0x24, 0x22, 0xf1, 0x24, 0xff, 0xb5, 0x6c, 0x46, 0x87, 0xaa, 0x92, 0x78, 0x80, 0x7f, 0x9e,
	0x77, 0x86, 0x2d, 0xe8, 0xe4, 0x74, 0x45, 0x26, 0x61, 0xe0, 0x93, 0x1e, 0xb0, 0x6b, 0x1a, 0xb6,
	0xb7, 0x65, 0x12, 0xfe, 0xfb, 0xe8, 0xe4, 0xd8, 0x2d, 0xbd, 0xb2, 0xfd, 0xa7, 0x99, 0x84, 0xa1,
	0x8f, 0xff, 0x42, 0x16, 0xd1, 0xa9, 0xd0, 0x55, 0x85, 0xc2, 0xa1, 0x5c, 0x3a, 0x08, 0x23, 0x12,
	0x0f, 0xf2, 0x4b, 0xc4, 0xe6, 0x74, 0xac, 0xec, 0x52, 0x38, 0xb5, 0x47, 0x18, 0x45, 0x24, 0x1e,
	0xe7, 0x67, 0xff, 0xf0, 0xf8, 0x51, 0x73, 0x72, 0xac, 0x39, 0xf9, 0xae, 0x39, 0x79, 0x6f, 0x78,
	0x70, 0x6c, 0x78, 0xf0, 0xd5, 0xf0, 0xe0, 0xe5, 0xae, 0x54, 0x6e, 0xbd, 0x5b, 0x25, 0x42, 0x6f,
	0xd2, 0x76, 0xae, 0xb4, 0x5f, 0xf4, 0x70, 0xa1, 0xdd, 0xdb, 0x16, 0xed, 0x2a, 0xf4, 0x3b, 0xdd,
	0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x22, 0xe3, 0x9b, 0x45, 0x77, 0x01, 0x00, 0x00,
}

func (m *ServiceUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.ConnectedAt != 0 {
		i = encodeVarintServiceUser(dAtA, i, uint64(m.ConnectedAt))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ServiceUserId) > 0 {
		i -= len(m.ServiceUserId)
		copy(dAtA[i:], m.ServiceUserId)
		i = encodeVarintServiceUser(dAtA, i, uint64(len(m.ServiceUserId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintServiceUser(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServiceId) > 0 {
		i -= len(m.ServiceId)
		copy(dAtA[i:], m.ServiceId)
		i = encodeVarintServiceUser(dAtA, i, uint64(len(m.ServiceId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintServiceUser(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintServiceUser(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintServiceUser(dAtA []byte, offset int, v uint64) int {
	offset -= sovServiceUser(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ServiceUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovServiceUser(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovServiceUser(uint64(l))
	}
	l = len(m.ServiceId)
	if l > 0 {
		n += 1 + l + sovServiceUser(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovServiceUser(uint64(l))
	}
	l = len(m.ServiceUserId)
	if l > 0 {
		n += 1 + l + sovServiceUser(uint64(l))
	}
	if m.ConnectedAt != 0 {
		n += 1 + sovServiceUser(uint64(m.ConnectedAt))
	}
	if m.IsActive {
		n += 2
	}
	return n
}

func sovServiceUser(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServiceUser(x uint64) (n int) {
	return sovServiceUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ServiceUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceUserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceUserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectedAt", wireType)
			}
			m.ConnectedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipServiceUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServiceUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServiceUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServiceUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServiceUser
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupServiceUser
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthServiceUser
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthServiceUser        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServiceUser          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupServiceUser = fmt.Errorf("proto: unexpected end of group")
)
